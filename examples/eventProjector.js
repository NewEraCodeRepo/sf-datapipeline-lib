"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Highland = require("highland");
const index_1 = require("../build/index");
const kafka_1 = require("../build/kafka");
const projector_1 = require("../build/projector");
const pubsub_1 = require("../build/pubsub");
const index_2 = require("./index");
const localDockerConnectorRedis_1 = require("./localDockerConnectorRedis");
var DML_OPERATION;
(function (DML_OPERATION) {
    DML_OPERATION[DML_OPERATION["CREATE"] = 0] = "CREATE";
    DML_OPERATION[DML_OPERATION["UPDATE"] = 1] = "UPDATE";
    DML_OPERATION[DML_OPERATION["DELETE"] = 2] = "DELETE";
})(DML_OPERATION || (DML_OPERATION = {}));
// Build list of changes
const changes = [
    {
        data: {
            copy_english__c: "test",
            copy_french__c: "toto",
            id: "1",
            merchant__c: "123",
            name: "a",
        },
        operation: DML_OPERATION.CREATE,
    },
    {
        data: {
            copy_english__c: "test",
            copy_french__c: "toto",
            id: "2",
            merchant__c: "123",
            name: "b",
        },
        operation: DML_OPERATION.CREATE,
    },
    {
        data: {
            copy_english__c: "test",
            copy_french__c: "toto",
            id: "3",
            merchant__c: "124",
            name: "c",
        },
        operation: DML_OPERATION.CREATE,
    },
];
function changeToEvent(change) {
    const data = change.data;
    return new index_2.OfferCreateEvent(data.id, data.merchant__c, data.name, data.copy_english__c, data.copy_french__c);
}
const inputTopic = "inputTest";
const projectedTopic = "projectedTest";
const kvStore = new localDockerConnectorRedis_1.KVStore();
const publisherClientId = "test.publisher";
const metadataWriter = index_1.buildMetadataWriter(publisherClientId);
const consumerClientId = "test.consumer";
const consumerGroupId = "test.consumer.group";
const subscriber = kafka_1.buildSubscriber("kafka:9092", consumerClientId, consumerGroupId);
const testConsumerClientId = "test.consumer";
const testConsumerGroupId = "test.consumer.group.test";
const testSubscriber = kafka_1.buildSubscriber("kafka:9092", testConsumerClientId, testConsumerGroupId);
kafka_1.buildPublisher("kafka:9092", publisherClientId)
    .then((publisher) => {
    const inputXform = pubsub_1.buildPublishingTransform(publisher, inputTopic, metadataWriter, new index_2.OfferCreateEventSerde(publisherClientId));
    const inboundStream = pubsub_1.buildSubscriptionStream(subscriber, [inputTopic], new index_2.OfferCreateEventSerde(consumerClientId));
    const projectedXform = pubsub_1.buildPublishingTransform(publisher, projectedTopic, metadataWriter, new index_2.OfferSetEventtSerde(publisherClientId));
    const consumingStream = pubsub_1.buildSubscriptionStream(testSubscriber, [projectedTopic], new index_2.OfferSetEventtSerde(testConsumerClientId));
    Highland(changes)
        .map(changeToEvent)
        .map(inputXform)
        .each((result) => result.successful ? console.info(`Published message to ${inputTopic}`) : console.error("Couldn't publish error", result.error))
        .done(() => {
        console.log("Finished producing on input topic");
    });
    const eventKeyFn = (event) => event.id;
    const getStateFn = projector_1.buildGetStateFn(kvStore, eventKeyFn);
    const setStateFn = projector_1.buildSetStateFn(kvStore, eventKeyFn);
    const reduceFn = ([event, currentState]) => {
        const newState = {
            copyEnglish: event.copyEnglish,
            copyFrench: event.copyFrench,
            id: event.id,
            merchantId: event.merchantId,
            name: event.name,
        };
        return [event, currentState, newState];
    };
    inboundStream
        .errors((err) => console.error("Projector consumer error", err))
        .map((del) => del.event)
        .map((e) => Highland(getStateFn(e)))
        .sequence()
        .map(reduceFn)
        .map((input) => Highland(setStateFn(input)))
        .sequence()
        .map(([event, oldState, newState]) => new index_2.OfferSetEvent(newState.id, newState.merchantId, newState.name, newState.copyEnglish, newState.copyFrench))
        .map(projectedXform)
        .each((result) => result.successful ? console.info(`Published message to ${projectedTopic}`) : console.error("Couldn't publish error", result.error))
        .done(() => console.log("Finished consuming on input topic"));
    consumingStream
        .map((del) => del.event)
        .each((event) => console.info("Received event", event))
        .done(() => console.log("Finished consuming on projected topic."));
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
