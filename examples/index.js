"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../build/index");
class SetStateEvent extends index_1.Event {
    constructor(name, state) {
        super();
        this.name = name;
        this.state = state;
    }
    type() {
        return "com.rbc.offer_platform.events.set_state";
    }
    key() {
        return this.name;
    }
}
exports.SetStateEvent = SetStateEvent;
class SetStateEventSerde {
    constructor(clientId) {
        this.clientId = clientId;
    }
    deserialize(buf) {
        const doc = JSON.parse(buf.toString());
        const metadata = doc.metadata;
        const event = new SetStateEvent(doc.name, doc.state);
        event.metadata = metadata;
        return event;
    }
    serialize(event) {
        return new Buffer(JSON.stringify({
            metadata: event.metadata,
            name: event.name,
            state: event.state,
        }));
    }
}
exports.SetStateEventSerde = SetStateEventSerde;
class OfferCreateEvent extends index_1.Event {
    constructor(id, merchantId, name, copyEnglish, copyFrench) {
        super();
        this.id = id;
        this.merchantId = merchantId;
        this.name = name;
        this.copyEnglish = copyEnglish;
        this.copyFrench = copyFrench;
    }
    type() {
        return "com.rbc.offer_platform.events.create_offer";
    }
    key() {
        return this.id;
    }
}
exports.OfferCreateEvent = OfferCreateEvent;
class OfferCreateEventSerde {
    constructor(clientId) {
        this.clientId = clientId;
    }
    deserialize(buf) {
        const doc = JSON.parse(buf.toString());
        const metadata = doc.metadata;
        const event = new OfferCreateEvent(doc.id, doc.merchantId, doc.name, doc.copyEnglish, doc.copyFrench);
        event.metadata = metadata;
        return event;
    }
    serialize(event) {
        return new Buffer(JSON.stringify({
            copyEnglish: event.copyEnglish,
            copyFrench: event.copyFrench,
            id: event.id,
            merchantId: event.merchantId,
            metadata: event.metadata,
            name: event.name,
        }));
    }
}
exports.OfferCreateEventSerde = OfferCreateEventSerde;
class OfferSetEvent extends index_1.Event {
    constructor(id, merchantId, name, copyEnglish, copyFrench) {
        super();
        this.id = id;
        this.merchantId = merchantId;
        this.name = name;
        this.copyEnglish = copyEnglish;
        this.copyFrench = copyFrench;
    }
    type() {
        return "com.rbc.offer_platform.events.set_offer";
    }
    key() {
        return this.id;
    }
}
exports.OfferSetEvent = OfferSetEvent;
class OfferSetEventtSerde {
    constructor(clientId) {
        this.clientId = clientId;
    }
    deserialize(buf) {
        const doc = JSON.parse(buf.toString());
        const metadata = doc.metadata;
        const event = new OfferSetEvent(doc.id, doc.merchantId, doc.name, doc.copyEnglish, doc.copyFrench);
        event.metadata = metadata;
        return event;
    }
    serialize(event) {
        return new Buffer(JSON.stringify({
            copyEnglish: event.copyEnglish,
            copyFrench: event.copyFrench,
            id: event.id,
            merchantId: event.merchantId,
            metadata: event.metadata,
            name: event.name,
        }));
    }
}
exports.OfferSetEventtSerde = OfferSetEventtSerde;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
